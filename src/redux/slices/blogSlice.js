import { createSlice } from '@reduxjs/toolkit';


const blogSlice = createSlice({
    name: 'blog',
    initialState: {
        programmingBlogs: [],
        carrierBlogs: [],
    },

    reducers: {
        addDataToProgrammingBlogs: (state, { payload }) => {
            state.programmingBlogs.push(payload);
        },
        addDataToCarrierBlogs: (state, { payload }) => {
            state.carrierBlogs.push(payload);
        },
        removeDataFromCarrierBlogs: (state, { payload }) => {
            state.programmingBlogs = state.programmingBlogs.filter(blog => blog.id !== payload.id);
        },
        removeDataFromProgrammingBlogs: (state, { payload }) => {
            state.carrierBlogs = state.carrierBlogs.filter(blog => blog.id !== payload.id);
        },
        // Use the PayloadAction type to declare the contents of `action.payload`

        /* incrementByAmount: (state, action) => {
          state.value += action.payload;
        }, */
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    /* extraReducers: (builder) => {
        builder
            .addCase(incrementAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(incrementAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value += action.payload;
            });
    }, */
    
});

export const { addDataToProgrammingBlogs, addDataToCarrierBlogs, removeDataFromCarrierBlogs, removeDataFromProgrammingBlogs } = blogSlice.actions;

export default blogSlice.reducer;